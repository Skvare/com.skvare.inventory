<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.skvare.inventory/xml/schema/CRM/Inventory/InventoryProductVariant.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:74550ad43e01244515eb67eeaa06d25a)
 */
use CRM_Inventory_ExtensionUtil as E;

/**
 * Database access object for the InventoryProductVariant entity.
 */
class CRM_Inventory_DAO_InventoryProductVariant extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_inventory_product_variant';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique Inventory Product Variant ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to Product
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $product_id;

  /**
   * Product listed price
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $listed_price;

  /**
   * Product Current price
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $current_price;

  /**
   * Product Variant details.
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $product_variant_details;

  /**
   * @var bool|string
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_disable;

  /**
   * Packed Weight
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $packed_weight;

  /**
   * Packed Height
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $packed_height;

  /**
   * Packed Width
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $packed_width;

  /**
   * Packed Depth
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $packed_depth;

  /**
   * @var string
   *   (SQL type: varchar(100))
   *   Note that values will be retrieved from the database as a string.
   */
  public $image_thumbnail;

  /**
   * @var string
   *   (SQL type: varchar(100))
   *   Note that values will be retrieved from the database as a string.
   */
  public $image_actual;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_inventory_product_variant';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Inventory Product Variants') : E::ts('Inventory Product Variant');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'product_id', 'civicrm_inventory_product', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'inventory_product_variant_id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique Inventory Product Variant ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_product_variant.id',
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'product_id' => [
          'name' => 'product_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Product ID'),
          'description' => E::ts('FK to Product'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_product_variant.product_id',
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'FKClassName' => 'CRM_Inventory_DAO_InventoryProduct',
          'add' => NULL,
        ],
        'inventory_product_variant_listed_price' => [
          'name' => 'listed_price',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Listed Price'),
          'description' => E::ts('Product listed price'),
          'required' => TRUE,
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_product_variant.listed_price',
          'dataPattern' => '/^\d+(\.\d{2})?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Listed Price"),
          ],
          'add' => NULL,
        ],
        'inventory_product_variant_current_price' => [
          'name' => 'current_price',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Current Price'),
          'description' => E::ts('Product Current price'),
          'required' => TRUE,
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_product_variant.current_price',
          'dataPattern' => '/^\d+(\.\d{2})?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Curent Price"),
          ],
          'add' => NULL,
        ],
        'inventory_product_variant_details' => [
          'name' => 'product_variant_details',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Product Variant Details'),
          'description' => E::ts('Product Variant details.'),
          'rows' => 4,
          'cols' => 60,
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_product_variant.product_variant_details',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'html' => [
            'type' => 'TextArea',
          ],
          'add' => '5.63',
        ],
        'inventory_product_variant_is_disable' => [
          'name' => 'is_disable',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Is Disable'),
          'required' => FALSE,
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_product_variant.is_disable',
          'export' => TRUE,
          'default' => '0',
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => NULL,
        ],
        'inventory_product_weight' => [
          'name' => 'packed_weight',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Packed Weight'),
          'description' => E::ts('Packed Weight'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_product_variant.packed_weight',
          'dataPattern' => '/^\d+(\.\d{2})?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Packed Weight"),
          ],
          'add' => NULL,
        ],
        'inventory_product_height' => [
          'name' => 'packed_height',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Packed Height'),
          'description' => E::ts('Packed Height'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_product_variant.packed_height',
          'dataPattern' => '/^\d+(\.\d{2})?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Packed Height"),
          ],
          'add' => NULL,
        ],
        'inventory_product_width' => [
          'name' => 'packed_width',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Packed Width'),
          'description' => E::ts('Packed Width'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_product_variant.packed_width',
          'dataPattern' => '/^\d+(\.\d{2})?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Packed Width"),
          ],
          'add' => NULL,
        ],
        'inventory_product_depth' => [
          'name' => 'packed_depth',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Packed Depth'),
          'description' => E::ts('Packed Depth'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_product_variant.packed_depth',
          'dataPattern' => '/^\d+(\.\d{2})?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Packed Depth"),
          ],
          'add' => NULL,
        ],
        'inventory_product_thumbnail' => [
          'name' => 'image_thumbnail',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Thumbnail Image'),
          'required' => FALSE,
          'maxlength' => 100,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_product_variant.image_thumbnail',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'add' => '5.63',
        ],
        'inventory_product_image' => [
          'name' => 'image_actual',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Image'),
          'required' => FALSE,
          'maxlength' => 100,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_product_variant.image_actual',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_product_variant',
          'entity' => 'InventoryProductVariant',
          'bao' => 'CRM_Inventory_DAO_InventoryProductVariant',
          'localizable' => 0,
          'add' => '5.63',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'inventory_product_variant', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'inventory_product_variant', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
