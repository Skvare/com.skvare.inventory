<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.skvare.inventory/xml/schema/CRM/Inventory/InventoryBillingPlans.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:9dc137766ca2b008ec920f9d4afbcadf)
 */
use CRM_Inventory_ExtensionUtil as E;

/**
 * Database access object for the InventoryBillingPlans entity.
 */
class CRM_Inventory_DAO_InventoryBillingPlans extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_inventory_billing_plans';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique InventoryBillingPlans ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * @var string
   *   (SQL type: varchar(100))
   *   Note that values will be retrieved from the database as a string.
   */
  public $name;

  /**
   * Membership Type Associated with product.
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $membership_type_id;

  /**
   * The amount that is shown to the user.
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $amount;

  /**
   * Time units for recurrence of payment.
   *
   * @var string
   *   (SQL type: varchar(8))
   *   Note that values will be retrieved from the database as a string.
   */
  public $frequency_unit;

  /**
   * Number of time units for recurrence of payment.
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $frequency_interval;

  /**
   * Total number of payments to be made. Set this to 0 if this is an open-ended commitment i.e. no set end date.
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $installments;

  /**
   * The fair market value of this item.
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $intro_amount;

  /**
   * Time units for recurrence of payment.
   *
   * @var string
   *   (SQL type: varchar(8))
   *   Note that values will be retrieved from the database as a string.
   */
  public $intro_frequency_unit;

  /**
   * Number of time units for recurrence of payment.
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $intro_frequency_interval;

  /**
   * Total number of payments to be made. Set this to 0 if this is an open-ended commitment i.e. no set end date.
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $intro_installments;

  /**
   * The fair market value of this item.
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $value;

  /**
   * 3 character string, value from config setting or input via user.
   *
   * @var string|null
   *   (SQL type: varchar(3))
   *   Note that values will be retrieved from the database as a string.
   */
  public $currency;

  /**
   * If checked, this billing plan is only available for renewals, not new signups.
   *
   * @var bool|string
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $renew_only;

  /**
   * If unchecked, current memberships that have this billing plan will still use it, but it will not be available at renewal time or sign up.
   *
   * @var bool|string
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_active;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_inventory_billing_plans';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Inventory Billing Planses') : E::ts('Inventory Billing Plans');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique InventoryBillingPlans ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_billing_plans.id',
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'inventory_billing_label' => [
          'name' => 'name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Plan Name'),
          'required' => TRUE,
          'maxlength' => 100,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_billing_plans.name',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '5.63',
        ],
        'inventory_billing_membership_type_id' => [
          'name' => 'membership_type_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Membership Type ID'),
          'description' => E::ts('Membership Type Associated with product.'),
          'required' => TRUE,
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_billing_plans.membership_type_id',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'FKClassName' => 'CRM_Member_DAO_MembershipType',
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Membership Type"),
          ],
          'pseudoconstant' => [
            'table' => 'civicrm_membership_type',
            'keyColumn' => 'id',
            'labelColumn' => 'name',
          ],
          'add' => '5.63',
        ],
        'inventory_billing_amount' => [
          'name' => 'amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Amount'),
          'description' => E::ts('The amount that is shown to the user.'),
          'required' => TRUE,
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_billing_plans.amount',
          'dataPattern' => '/^\d+(\.\d{2})?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Amount"),
          ],
          'add' => NULL,
        ],
        'inventory_billing_frequency_unit' => [
          'name' => 'frequency_unit',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Frequency'),
          'description' => E::ts('Time units for recurrence of payment.'),
          'required' => TRUE,
          'maxlength' => 8,
          'size' => CRM_Utils_Type::EIGHT,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_billing_plans.frequency_unit',
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'recur_frequency_units',
            'keyColumn' => 'name',
            'optionEditPath' => 'civicrm/admin/options/recur_frequency_units',
          ],
          'add' => NULL,
        ],
        'inventory_billing_frequency_interval' => [
          'name' => 'frequency_interval',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Frequency interval'),
          'description' => E::ts('Number of time units for recurrence of payment.'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_billing_plans.frequency_interval',
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'inventory_billing_frequency_installments' => [
          'name' => 'installments',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Number of Installments'),
          'description' => E::ts('Total number of payments to be made. Set this to 0 if this is an open-ended commitment i.e. no set end date.'),
          'required' => FALSE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_billing_plans.installments',
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'inventory_billing_intro_amount' => [
          'name' => 'intro_amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Intro Amount'),
          'description' => E::ts('The fair market value of this item.'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_billing_plans.intro_amount',
          'dataPattern' => '/^\d+(\.\d{2})?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Intro amount"),
          ],
          'add' => NULL,
        ],
        'inventory_billing_intro_frequency_unit' => [
          'name' => 'intro_frequency_unit',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Intro frequency'),
          'description' => E::ts('Time units for recurrence of payment.'),
          'required' => FALSE,
          'maxlength' => 8,
          'size' => CRM_Utils_Type::EIGHT,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_billing_plans.intro_frequency_unit',
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'recur_frequency_units',
            'keyColumn' => 'name',
            'optionEditPath' => 'civicrm/admin/options/recur_frequency_units',
          ],
          'add' => NULL,
        ],
        'inventory_billing_intro_frequency_interval' => [
          'name' => 'intro_frequency_interval',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Intro frequency interval'),
          'description' => E::ts('Number of time units for recurrence of payment.'),
          'required' => FALSE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_billing_plans.intro_frequency_interval',
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'inventory_billing_frequency_intro_installments' => [
          'name' => 'intro_installments',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Number of Installments'),
          'description' => E::ts('Total number of payments to be made. Set this to 0 if this is an open-ended commitment i.e. no set end date.'),
          'required' => FALSE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_billing_plans.intro_installments',
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'inventory_billing_value' => [
          'name' => 'value',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Value'),
          'description' => E::ts('The fair market value of this item.'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_inventory_billing_plans.value',
          'dataPattern' => '/^\d+(\.\d{2})?$/',
          'export' => TRUE,
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Fair Market Value"),
          ],
          'add' => NULL,
        ],
        'inventory_billing_currency' => [
          'name' => 'currency',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Currency'),
          'description' => E::ts('3 character string, value from config setting or input via user.'),
          'maxlength' => 3,
          'size' => CRM_Utils_Type::FOUR,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_billing_plans.currency',
          'default' => NULL,
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'table' => 'civicrm_currency',
            'keyColumn' => 'name',
            'labelColumn' => 'full_name',
            'nameColumn' => 'name',
            'abbrColumn' => 'symbol',
          ],
          'add' => '3.2',
        ],
        'inventory_billing_renew_only' => [
          'name' => 'renew_only',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Renew Only?'),
          'description' => E::ts('If checked, this billing plan is only available for renewals, not new signups.'),
          'required' => FALSE,
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_billing_plans.renew_only',
          'export' => TRUE,
          'default' => '0',
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => NULL,
        ],
        'inventory_billing_is_active' => [
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Is Active'),
          'description' => E::ts('If unchecked, current memberships that have this billing plan will still use it, but it will not be available at renewal time or sign up.'),
          'required' => FALSE,
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inventory_billing_plans.is_active',
          'export' => TRUE,
          'default' => '1',
          'table_name' => 'civicrm_inventory_billing_plans',
          'entity' => 'InventoryBillingPlans',
          'bao' => 'CRM_Inventory_DAO_InventoryBillingPlans',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'inventory_billing_plans', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'inventory_billing_plans', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
